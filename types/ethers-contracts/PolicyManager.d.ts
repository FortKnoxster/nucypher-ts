/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PolicyManagerInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_FEE_DELTA()": FunctionFragment;
    "calculateRefundValue(bytes16,address)": FunctionFragment;
    "createPolicies(bytes16[],address,uint64,address[])": FunctionFragment;
    "createPolicy(bytes16,address,uint64,address[])": FunctionFragment;
    "escrow()": FunctionFragment;
    "feeRateRange()": FunctionFragment;
    "finishUpgrade(address)": FunctionFragment;
    "genesisSecondsPerPeriod()": FunctionFragment;
    "getArrangementInfo(bytes16,uint256)": FunctionFragment;
    "getArrangementsLength(bytes16)": FunctionFragment;
    "getCurrentPeriod()": FunctionFragment;
    "getMinFeeRate(address)": FunctionFragment;
    "getNodeFeeDelta(address,uint16)": FunctionFragment;
    "getPolicyOwner(bytes16)": FunctionFragment;
    "getRevocationHash(bytes16,address)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "isUpgrade()": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "nodes(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ping(address,uint16,uint16,uint16)": FunctionFragment;
    "policies(bytes16)": FunctionFragment;
    "previousTarget()": FunctionFragment;
    "refund(bytes16,address)": FunctionFragment;
    "register(address,uint16)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetTimestamp()": FunctionFragment;
    "revoke(bytes16,address,bytes)": FunctionFragment;
    "revokeArrangement(bytes16,address)": FunctionFragment;
    "revokePolicy(bytes16)": FunctionFragment;
    "secondsPerPeriod()": FunctionFragment;
    "setFeeRateRange(uint128,uint128,uint128)": FunctionFragment;
    "setMinFeeRate(uint256)": FunctionFragment;
    "target()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyState(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_FEE_DELTA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRefundValue",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicies",
    values: [BytesLike[], string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [BytesLike, string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "escrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRateRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finishUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisSecondsPerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArrangementInfo",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArrangementsLength",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinFeeRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeFeeDelta",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevocationHash",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isUpgrade", values?: undefined): string;
  encodeFunctionData(functionFragment: "migrate", values: [string]): string;
  encodeFunctionData(functionFragment: "nodes", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ping",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "policies", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "previousTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeArrangement",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePolicy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "secondsPerPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRateRange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "verifyState", values: [string]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_FEE_DELTA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRefundValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRateRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisSecondsPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArrangementInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArrangementsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeFeeDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevocationHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUpgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ping", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeArrangement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondsPerPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRateRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ArrangementRevoked(bytes16,address,address,uint256)": EventFragment;
    "FeeRateRangeSet(address,uint256,uint256,uint256)": EventFragment;
    "MinFeeRateSet(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PolicyCreated(bytes16,address,address,uint256,uint64,uint64,uint256)": EventFragment;
    "PolicyRevoked(bytes16,address,uint256)": EventFragment;
    "RefundForArrangement(bytes16,address,address,uint256)": EventFragment;
    "RefundForPolicy(bytes16,address,uint256)": EventFragment;
    "StateVerified(address,address)": EventFragment;
    "UpgradeFinished(address,address)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArrangementRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRateRangeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinFeeRateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundForArrangement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundForPolicy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class PolicyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PolicyManagerInterface;

  functions: {
    DEFAULT_FEE_DELTA(overrides?: CallOverrides): Promise<[BigNumber]>;

    "calculateRefundValue(bytes16,address)"(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { refundValue: BigNumber }>;

    "calculateRefundValue(bytes16)"(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { refundValue: BigNumber }>;

    createPolicies(
      _policyIds: BytesLike[],
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escrow(overrides?: CallOverrides): Promise<[string]>;

    feeRateRange(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        min: BigNumber;
        defaultValue: BigNumber;
        max: BigNumber;
      }
    >;

    finishUpgrade(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    genesisSecondsPerPeriod(overrides?: CallOverrides): Promise<[number]>;

    getArrangementInfo(
      _policyId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        node: string;
        indexOfDowntimePeriods: BigNumber;
        lastRefundedPeriod: number;
      }
    >;

    getArrangementsLength(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<[number]>;

    getMinFeeRate(
      _node: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNodeFeeDelta(
      _node: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPolicyOwner(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRevocationHash(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    isUpgrade(overrides?: CallOverrides): Promise<[number]>;

    migrate(
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        fee: BigNumber;
        previousFeePeriod: number;
        feeRate: BigNumber;
        minFeeRate: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ping(
      _node: string,
      _processedPeriod1: BigNumberish,
      _processedPeriod2: BigNumberish,
      _periodToSetDefault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    policies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        disabled: boolean;
        sponsor: string;
        owner: string;
        feeRate: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        reservedSlot1: BigNumber;
        reservedSlot2: BigNumber;
        reservedSlot3: BigNumber;
        reservedSlot4: BigNumber;
        reservedSlot5: BigNumber;
      }
    >;

    previousTarget(overrides?: CallOverrides): Promise<[string]>;

    "refund(bytes16,address)"(
      _policyId: BytesLike,
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "refund(bytes16)"(
      _policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    register(
      _node: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    revoke(
      _policyId: BytesLike,
      _node: string,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeArrangement(
      _policyId: BytesLike,
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokePolicy(
      _policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    secondsPerPeriod(overrides?: CallOverrides): Promise<[number]>;

    setFeeRateRange(
      _min: BigNumberish,
      _default: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinFeeRate(
      _minFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    target(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyState(
      _testTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address)"(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_FEE_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

  "calculateRefundValue(bytes16,address)"(
    _policyId: BytesLike,
    _node: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateRefundValue(bytes16)"(
    _policyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createPolicies(
    _policyIds: BytesLike[],
    _policyOwner: string,
    _endTimestamp: BigNumberish,
    _nodes: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPolicy(
    _policyId: BytesLike,
    _policyOwner: string,
    _endTimestamp: BigNumberish,
    _nodes: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escrow(overrides?: CallOverrides): Promise<string>;

  feeRateRange(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      min: BigNumber;
      defaultValue: BigNumber;
      max: BigNumber;
    }
  >;

  finishUpgrade(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  genesisSecondsPerPeriod(overrides?: CallOverrides): Promise<number>;

  getArrangementInfo(
    _policyId: BytesLike,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number] & {
      node: string;
      indexOfDowntimePeriods: BigNumber;
      lastRefundedPeriod: number;
    }
  >;

  getArrangementsLength(
    _policyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPeriod(overrides?: CallOverrides): Promise<number>;

  getMinFeeRate(_node: string, overrides?: CallOverrides): Promise<BigNumber>;

  getNodeFeeDelta(
    _node: string,
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPolicyOwner(
    _policyId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRevocationHash(
    _policyId: BytesLike,
    _node: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  isUpgrade(overrides?: CallOverrides): Promise<number>;

  migrate(
    _node: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nodes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber] & {
      fee: BigNumber;
      previousFeePeriod: number;
      feeRate: BigNumber;
      minFeeRate: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  ping(
    _node: string,
    _processedPeriod1: BigNumberish,
    _processedPeriod2: BigNumberish,
    _periodToSetDefault: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  policies(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      disabled: boolean;
      sponsor: string;
      owner: string;
      feeRate: BigNumber;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      reservedSlot1: BigNumber;
      reservedSlot2: BigNumber;
      reservedSlot3: BigNumber;
      reservedSlot4: BigNumber;
      reservedSlot5: BigNumber;
    }
  >;

  previousTarget(overrides?: CallOverrides): Promise<string>;

  "refund(bytes16,address)"(
    _policyId: BytesLike,
    _node: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "refund(bytes16)"(
    _policyId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  register(
    _node: string,
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  revoke(
    _policyId: BytesLike,
    _node: string,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeArrangement(
    _policyId: BytesLike,
    _node: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokePolicy(
    _policyId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  secondsPerPeriod(overrides?: CallOverrides): Promise<number>;

  setFeeRateRange(
    _min: BigNumberish,
    _default: BigNumberish,
    _max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinFeeRate(
    _minFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  target(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyState(
    _testTarget: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address)"(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_FEE_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateRefundValue(bytes16,address)"(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateRefundValue(bytes16)"(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolicies(
      _policyIds: BytesLike[],
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    escrow(overrides?: CallOverrides): Promise<string>;

    feeRateRange(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        min: BigNumber;
        defaultValue: BigNumber;
        max: BigNumber;
      }
    >;

    finishUpgrade(_target: string, overrides?: CallOverrides): Promise<void>;

    genesisSecondsPerPeriod(overrides?: CallOverrides): Promise<number>;

    getArrangementInfo(
      _policyId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        node: string;
        indexOfDowntimePeriods: BigNumber;
        lastRefundedPeriod: number;
      }
    >;

    getArrangementsLength(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<number>;

    getMinFeeRate(_node: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNodeFeeDelta(
      _node: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyOwner(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRevocationHash(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    isUpgrade(overrides?: CallOverrides): Promise<number>;

    migrate(_node: string, overrides?: CallOverrides): Promise<void>;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        fee: BigNumber;
        previousFeePeriod: number;
        feeRate: BigNumber;
        minFeeRate: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    ping(
      _node: string,
      _processedPeriod1: BigNumberish,
      _processedPeriod2: BigNumberish,
      _periodToSetDefault: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    policies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        disabled: boolean;
        sponsor: string;
        owner: string;
        feeRate: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        reservedSlot1: BigNumber;
        reservedSlot2: BigNumber;
        reservedSlot3: BigNumber;
        reservedSlot4: BigNumber;
        reservedSlot5: BigNumber;
      }
    >;

    previousTarget(overrides?: CallOverrides): Promise<string>;

    "refund(bytes16,address)"(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "refund(bytes16)"(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    register(
      _node: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    revoke(
      _policyId: BytesLike,
      _node: string,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeArrangement(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokePolicy(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    secondsPerPeriod(overrides?: CallOverrides): Promise<number>;

    setFeeRateRange(
      _min: BigNumberish,
      _default: BigNumberish,
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinFeeRate(
      _minFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    target(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyState(_testTarget: string, overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

    "withdraw(address)"(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ArrangementRevoked(
      policyId?: BytesLike | null,
      sender?: string | null,
      node?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { policyId: string; sender: string; node: string; value: BigNumber }
    >;

    FeeRateRangeSet(
      sender?: string | null,
      min?: null,
      defaultValue?: null,
      max?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        min: BigNumber;
        defaultValue: BigNumber;
        max: BigNumber;
      }
    >;

    MinFeeRateSet(
      node?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { node: string; value: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PolicyCreated(
      policyId?: BytesLike | null,
      sponsor?: string | null,
      owner?: string | null,
      feeRate?: null,
      startTimestamp?: null,
      endTimestamp?: null,
      numberOfNodes?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        policyId: string;
        sponsor: string;
        owner: string;
        feeRate: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        numberOfNodes: BigNumber;
      }
    >;

    PolicyRevoked(
      policyId?: BytesLike | null,
      sender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { policyId: string; sender: string; value: BigNumber }
    >;

    RefundForArrangement(
      policyId?: BytesLike | null,
      sender?: string | null,
      node?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { policyId: string; sender: string; node: string; value: BigNumber }
    >;

    RefundForPolicy(
      policyId?: BytesLike | null,
      sender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { policyId: string; sender: string; value: BigNumber }
    >;

    StateVerified(
      testTarget?: string | null,
      sender?: null
    ): TypedEventFilter<
      [string, string],
      { testTarget: string; sender: string }
    >;

    UpgradeFinished(
      target?: string | null,
      sender?: null
    ): TypedEventFilter<[string, string], { target: string; sender: string }>;

    Withdrawn(
      node?: string | null,
      recipient?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { node: string; recipient: string; value: BigNumber }
    >;
  };

  estimateGas: {
    DEFAULT_FEE_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateRefundValue(bytes16,address)"(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateRefundValue(bytes16)"(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolicies(
      _policyIds: BytesLike[],
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escrow(overrides?: CallOverrides): Promise<BigNumber>;

    feeRateRange(overrides?: CallOverrides): Promise<BigNumber>;

    finishUpgrade(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    genesisSecondsPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getArrangementInfo(
      _policyId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArrangementsLength(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getMinFeeRate(_node: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNodeFeeDelta(
      _node: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicyOwner(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevocationHash(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    isUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nodes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ping(
      _node: string,
      _processedPeriod1: BigNumberish,
      _processedPeriod2: BigNumberish,
      _periodToSetDefault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    policies(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    previousTarget(overrides?: CallOverrides): Promise<BigNumber>;

    "refund(bytes16,address)"(
      _policyId: BytesLike,
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "refund(bytes16)"(
      _policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    register(
      _node: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    revoke(
      _policyId: BytesLike,
      _node: string,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeArrangement(
      _policyId: BytesLike,
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokePolicy(
      _policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    secondsPerPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeRateRange(
      _min: BigNumberish,
      _default: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinFeeRate(
      _minFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyState(
      _testTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address)"(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_FEE_DELTA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calculateRefundValue(bytes16,address)"(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateRefundValue(bytes16)"(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPolicies(
      _policyIds: BytesLike[],
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPolicy(
      _policyId: BytesLike,
      _policyOwner: string,
      _endTimestamp: BigNumberish,
      _nodes: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRateRange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finishUpgrade(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    genesisSecondsPerPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArrangementInfo(
      _policyId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArrangementsLength(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinFeeRate(
      _node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeFeeDelta(
      _node: string,
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicyOwner(
      _policyId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevocationHash(
      _policyId: BytesLike,
      _node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ping(
      _node: string,
      _processedPeriod1: BigNumberish,
      _processedPeriod2: BigNumberish,
      _periodToSetDefault: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    policies(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "refund(bytes16,address)"(
      _policyId: BytesLike,
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "refund(bytes16)"(
      _policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    register(
      _node: string,
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revoke(
      _policyId: BytesLike,
      _node: string,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeArrangement(
      _policyId: BytesLike,
      _node: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokePolicy(
      _policyId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    secondsPerPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeRateRange(
      _min: BigNumberish,
      _default: BigNumberish,
      _max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinFeeRate(
      _minFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyState(
      _testTarget: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
